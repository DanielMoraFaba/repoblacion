<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="6e1d2f6f-eb64-44f1-a655-78db04e9a3bb" name="Changes" comment="Clase Consola&#10;&#10;1. Crea la clase Consola en el paquete indicado en el diagrama.&#10;2. Crea su constructor teniendo en cuenta que es una clase de utilidades y que no tiene sentido instanciar objetos de la misma.&#10;3. Crea el método leerAnchura que pedirá la anchura de nuestro bosque mientras ésta no sea correcta.&#10;4. Crea el método leerAltura que pedirá la altura de nuestro bosque mientras ésta no sea correcta.&#10;5. Crea el método leerPoblacion que pedirá la población de nuestro bosque mientras ésta sea menor o igual que cero. Realiza un commit con la realización de esta clase.">
      <change afterPath="$PROJECT_DIR$/src/repoblacion/MainApp.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Enum" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2Kb8zuwwdyEkNI2cLJGqFzpCsSx" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/danid/IdeaProjects/ClientesEmpresa&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
  }
}</component>
  <component name="RunManager" selected="Application.MainApp">
    <configuration name="MainApp" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="repoblacion.MainApp" />
      <module name="Repoblacion" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="repoblacion.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ArbolTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="Repoblacion" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="test.modelo.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="test.modelo" />
      <option name="MAIN_CLASS_NAME" value="test.modelo.ArbolTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="BosqueTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="Repoblacion" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="test.modelo.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="test.modelo" />
      <option name="MAIN_CLASS_NAME" value="test.modelo.BosqueTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="PosicionTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="Repoblacion" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="test.modelo.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="test.modelo" />
      <option name="MAIN_CLASS_NAME" value="test.modelo.PosicionTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.MainApp" />
        <item itemvalue="JUnit.PosicionTest" />
        <item itemvalue="JUnit.BosqueTest" />
        <item itemvalue="JUnit.ArbolTest" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="6e1d2f6f-eb64-44f1-a655-78db04e9a3bb" name="Changes" comment="" />
      <created>1674232197057</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1674232197057</updated>
    </task>
    <task id="LOCAL-00001" summary="Primeros Pasos&#10;&#10;1. Lo primero que debes hacer es un fork de este repositorio.&#10;2. Clona tu repositorio remoto recién copiado en GitHub a un repositorio local que será donde irás realizando lo que a continuación se te pide. Modifica el archivo README.md para que incluya tu nombre en el apartado &quot;Alumno&quot;. Realiza tu primer commit.&#10;3. Debes introducir correctamente en el proyecto tanto la librería Entrada como la JUnit5 para utilizarla posteriormente.&#10;4. Los paquetes en los que se encuentren las diferentes clases deberán ser los indicados en el diagrama de clases.">
      <created>1674235298607</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1674235298607</updated>
    </task>
    <task id="LOCAL-00002" summary="Enumerado Especie&#10;&#10;1. Crea un enumerado llamado Especie que contenga los literales indicados en el diagrama de clases. Los literales estarán parametrizados y a cada uno le pasaremos la representación en cadena de los mismos: los nombres de las especies (álamo, encina, castaño, ciprés, pino piñonero, etc.).&#10;2. Crea el atributo cadenaAMostrar (String).&#10;3. Crea el constructor con la visibilidad adecuada, que almacenará en el atributo anterior la cadena que se le pase por parámetro. &#10;4. Crea el método toString que devolverá la representación en forma de cadena del literal. Realiza un commit con la creación de este enumerado.">
      <created>1675688138497</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1675688138497</updated>
    </task>
    <task id="LOCAL-00003" summary="Clase Posicion&#10;&#10;1. Crea la clase Posicion. Crea los atributos x e y del tipo y la visibilidad indicados.&#10;2. Crea los métodos get.&#10;3. Crea el constructor con parámetros.&#10;4. Crea el constructor copia.&#10;5. Crea el método distancia que aceptará otra posición como parámetro y si es distinta de null devolverá la distancia entre la posición en cuestión y la pasada por parámetro y en caso contrario lanzará la excepción NullPointerException.&#10;6. Crea el método toString que devolverá un String y será la representación de la posición (x=valorX, y=valorY). Se restringirán los decimales a tres. Realiza un commit con la creación de esta clase.">
      <created>1675688217756</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1675688217756</updated>
    </task>
    <task id="LOCAL-00004" summary="Clase Arbol&#10;&#10;1. Crea la clase Arbol cuyos atributos serán una especie (del tipo enumerado Especie) y posicion (de la clase Posicion), con la visibilidad adecuada.&#10;2. Crea los métodos get y set para cada atributo con la visibilidad adecuada. Los métodos set siempre comprobarán la validez de los parámetros pasados y si no son correctos deberá lanzar la excepción adecuada con el mensaje adecuado.&#10;3. Crea un constructor para la clase que acepte como parámetros especie y posición (utiliza los métodos set creados anteriormente).&#10;4. Crea el constructor copia&#10;5. Crea el método toString que devuelva un String que será la representación de dicho objeto (especie y posición). Realiza un commit con la creación de esta clase.">
      <created>1675688321338</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1675688321338</updated>
    </task>
    <task id="LOCAL-00005" summary="Clase Bosque&#10;&#10;1. Crea la clase Bosque cuyos atributos y constantes serán las indicados en el diagrama de clases. Su tipo y visibilidad deben ser los indicados.&#10;2. Crea los métodos get y set para cada atributo con la visibilidad adecuada. Los métodos set siempre comprobarán la validez de los parámetros pasados y si no son correctos deberá lanzar la excepción adecuada con el mensaje adecuado.&#10;3. Crea el constructor que acepte los parámetros ancho, alto y población, realice las comprobaciones adecuadas y asigne los valores a los atributos correspondientes o en caso contrario lance la excepción adecuada. El constructor llamará la método repoblar.&#10;4. Crea el método duplicaBosque que devuelve una copia del bosque.&#10;5. Crea el método checkPoblacion que comprueba si el parámetro población pasado al constructor es válido. En caso de no serlo, lanzará la excepción adecuada con el mensaje adecuado.&#10;6. Crea el método repoblar que para cada elemento del array de árboles, creará un nuevo árbol de una especie aleatoria y en una posición aleatoria dentro de los límites en x (-ancho/2, ancho/2) e y (-alto/2, alto/2). Este método debe tener presente que, cuando se vaya a crear el árbol:&#10;6.1. La especie generada aleatoriamente debe ser compatible con la especie del árbol que le precede en el array (arboles[i-1]).&#10;6.2. Que no se tengan ya en el bosque más de MAX_ESPECIES.&#10;7. Crea el método realizarCalculos que recorrerá el array de árboles y calculará cuál es el más centrado y el más alejado del centro (punto (0, 0)).&#10;8. Crea los métodos getArbolMasCentrado y getArbolMasAlejado que devolverán el árbol más centrado y más alejado anteriormente calculados.&#10;9. Crea el método toString que devolverá un String que representará el alto, ancho y la lista de árboles del bosque. Realiza un commit con la realización de esta clase.">
      <created>1675688415042</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1675688415042</updated>
    </task>
    <task id="LOCAL-00006" summary="Clase Consola&#10;&#10;1. Crea la clase Consola en el paquete indicado en el diagrama.&#10;2. Crea su constructor teniendo en cuenta que es una clase de utilidades y que no tiene sentido instanciar objetos de la misma.&#10;3. Crea el método leerAnchura que pedirá la anchura de nuestro bosque mientras ésta no sea correcta.&#10;4. Crea el método leerAltura que pedirá la altura de nuestro bosque mientras ésta no sea correcta.&#10;5. Crea el método leerPoblacion que pedirá la población de nuestro bosque mientras ésta sea menor o igual que cero. Realiza un commit con la realización de esta clase.">
      <created>1675688476981</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1675688476981</updated>
    </task>
    <option name="localTasksCounter" value="7" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <MESSAGE value="Primeros Pasos&#10;&#10;1. Lo primero que debes hacer es un fork de este repositorio.&#10;2. Clona tu repositorio remoto recién copiado en GitHub a un repositorio local que será donde irás realizando lo que a continuación se te pide. Modifica el archivo README.md para que incluya tu nombre en el apartado &quot;Alumno&quot;. Realiza tu primer commit.&#10;3. Debes introducir correctamente en el proyecto tanto la librería Entrada como la JUnit5 para utilizarla posteriormente.&#10;4. Los paquetes en los que se encuentren las diferentes clases deberán ser los indicados en el diagrama de clases." />
    <MESSAGE value="Enumerado Especie&#10;&#10;1. Crea un enumerado llamado Especie que contenga los literales indicados en el diagrama de clases. Los literales estarán parametrizados y a cada uno le pasaremos la representación en cadena de los mismos: los nombres de las especies (álamo, encina, castaño, ciprés, pino piñonero, etc.).&#10;2. Crea el atributo cadenaAMostrar (String).&#10;3. Crea el constructor con la visibilidad adecuada, que almacenará en el atributo anterior la cadena que se le pase por parámetro. &#10;4. Crea el método toString que devolverá la representación en forma de cadena del literal. Realiza un commit con la creación de este enumerado." />
    <MESSAGE value="Clase Posicion&#10;&#10;1. Crea la clase Posicion. Crea los atributos x e y del tipo y la visibilidad indicados.&#10;2. Crea los métodos get.&#10;3. Crea el constructor con parámetros.&#10;4. Crea el constructor copia.&#10;5. Crea el método distancia que aceptará otra posición como parámetro y si es distinta de null devolverá la distancia entre la posición en cuestión y la pasada por parámetro y en caso contrario lanzará la excepción NullPointerException.&#10;6. Crea el método toString que devolverá un String y será la representación de la posición (x=valorX, y=valorY). Se restringirán los decimales a tres. Realiza un commit con la creación de esta clase." />
    <MESSAGE value="Clase Arbol&#10;&#10;1. Crea la clase Arbol cuyos atributos serán una especie (del tipo enumerado Especie) y posicion (de la clase Posicion), con la visibilidad adecuada.&#10;2. Crea los métodos get y set para cada atributo con la visibilidad adecuada. Los métodos set siempre comprobarán la validez de los parámetros pasados y si no son correctos deberá lanzar la excepción adecuada con el mensaje adecuado.&#10;3. Crea un constructor para la clase que acepte como parámetros especie y posición (utiliza los métodos set creados anteriormente).&#10;4. Crea el constructor copia&#10;5. Crea el método toString que devuelva un String que será la representación de dicho objeto (especie y posición). Realiza un commit con la creación de esta clase." />
    <MESSAGE value="Clase Bosque&#10;&#10;1. Crea la clase Bosque cuyos atributos y constantes serán las indicados en el diagrama de clases. Su tipo y visibilidad deben ser los indicados.&#10;2. Crea los métodos get y set para cada atributo con la visibilidad adecuada. Los métodos set siempre comprobarán la validez de los parámetros pasados y si no son correctos deberá lanzar la excepción adecuada con el mensaje adecuado.&#10;3. Crea el constructor que acepte los parámetros ancho, alto y población, realice las comprobaciones adecuadas y asigne los valores a los atributos correspondientes o en caso contrario lance la excepción adecuada. El constructor llamará la método repoblar.&#10;4. Crea el método duplicaBosque que devuelve una copia del bosque.&#10;5. Crea el método checkPoblacion que comprueba si el parámetro población pasado al constructor es válido. En caso de no serlo, lanzará la excepción adecuada con el mensaje adecuado.&#10;6. Crea el método repoblar que para cada elemento del array de árboles, creará un nuevo árbol de una especie aleatoria y en una posición aleatoria dentro de los límites en x (-ancho/2, ancho/2) e y (-alto/2, alto/2). Este método debe tener presente que, cuando se vaya a crear el árbol:&#10;6.1. La especie generada aleatoriamente debe ser compatible con la especie del árbol que le precede en el array (arboles[i-1]).&#10;6.2. Que no se tengan ya en el bosque más de MAX_ESPECIES.&#10;7. Crea el método realizarCalculos que recorrerá el array de árboles y calculará cuál es el más centrado y el más alejado del centro (punto (0, 0)).&#10;8. Crea los métodos getArbolMasCentrado y getArbolMasAlejado que devolverán el árbol más centrado y más alejado anteriormente calculados.&#10;9. Crea el método toString que devolverá un String que representará el alto, ancho y la lista de árboles del bosque. Realiza un commit con la realización de esta clase." />
    <MESSAGE value="Clase Consola&#10;&#10;1. Crea la clase Consola en el paquete indicado en el diagrama.&#10;2. Crea su constructor teniendo en cuenta que es una clase de utilidades y que no tiene sentido instanciar objetos de la misma.&#10;3. Crea el método leerAnchura que pedirá la anchura de nuestro bosque mientras ésta no sea correcta.&#10;4. Crea el método leerAltura que pedirá la altura de nuestro bosque mientras ésta no sea correcta.&#10;5. Crea el método leerPoblacion que pedirá la población de nuestro bosque mientras ésta sea menor o igual que cero. Realiza un commit con la realización de esta clase." />
    <option name="LAST_COMMIT_MESSAGE" value="Clase Consola&#10;&#10;1. Crea la clase Consola en el paquete indicado en el diagrama.&#10;2. Crea su constructor teniendo en cuenta que es una clase de utilidades y que no tiene sentido instanciar objetos de la misma.&#10;3. Crea el método leerAnchura que pedirá la anchura de nuestro bosque mientras ésta no sea correcta.&#10;4. Crea el método leerAltura que pedirá la altura de nuestro bosque mientras ésta no sea correcta.&#10;5. Crea el método leerPoblacion que pedirá la población de nuestro bosque mientras ésta sea menor o igual que cero. Realiza un commit con la realización de esta clase." />
  </component>
</project>